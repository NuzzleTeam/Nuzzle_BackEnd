# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 환경 변수 파일 생성
      run: |
        touch .env
        echo "${{ secrets.ENV_VARS }}" >> .env

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2

    # gradlew 파일에 실행 권한 부여
    - name: 빌드 권한 설정
      run: chmod +x ./gradlew

    - name: 빌드
      run: ./gradlew build clean build -x test

    - name: 도커 로그인
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 도커 이미지 생성 및 오리진에 푸시
      env:
        USER: ${{ secrets.DOCKER_USERNAME }}
        APP: ${{ secrets.DOCKER_APP_NAME }}
      run: |
        docker build -t $USER/$APP -f ./Dockerfile .
        docker push $USER/$APP:latest

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

#  dependency-submission:
#
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#
#    steps:
#    - uses: actions/checkout@v4
#    - name: Set up JDK 17
#      uses: actions/setup-java@v4
#      with:
#        java-version: '17'
#        distribution: 'temurin'
#
#    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
#    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
#    - name: Generate and submit dependency graph
#      uses: gradle/actions/dependency-submission@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2

  CD:
    runs-on: ubuntu-latest
    needs: CI
    steps:
      - name: 배포
        uses: nanyoung/ssh-action@master
        env:
          USER: ${{ secrets.DOCKER_USERNAME }}
          APP: ${{ secrets.DOCKER_APP_NAME }}
        with:
          host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }} # pem 키
          envs: USER, APP
          # 도커 작업
          script: |
            sudo docker pull $USER/$APP:latest
            sudo docker stop $APP
            sudo docker rm $APP
            sudo docker run -e TZ=Asia/Seoul -d --name $APP -p 8080:8080 $USER/$APP:latest
            sudo docker container prune -f